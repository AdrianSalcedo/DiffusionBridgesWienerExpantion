install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
setwd("C:/Users/Usuario1/Dropbox/Artículos/Trabajos_Francisco/New_GeometricB")
library(sde)
library(sde)
library(plotly)
library(ggplot2)
library(MASS)
library(deSolve)
library(stats4)
library(fda)
library(splines)
library(fds)
library(Matrix)
library(rainbow)
library(pcaPP)
library(RCurl)
library(foreach)
simu1<-as.matrix(read.csv("Propagator.csv",header = T))
#simuSol<-read.csv("Solution_plot.csv",header = T)
#Tiempo<-read.csv("Time_Brownian_motion2023.csv",header = T)
TiempoC<-simu1[,1]
simu<-Propagador <- simu1[,2:118]
My_SBM=function(n,TiempoC)
{
MBM<-mat.or.vec(n,length(TiempoC))
l=length(TiempoC)
delta=TiempoC[2]-TiempoC[1]
for(i in 1:n){
for (j in 2:l)
{
MBM[i,j]<- MBM[i,j-1]+rnorm(1,0,sqrt(delta))
}
}
return(MBM)
}
### Parametros del puente :
theta<-0.3
eta<-0.2
T1<-1
t0<-0
M<-2
TL<-length(TiempoC)
M_Y<-M_X<-mat.or.vec(TL,M)
Vector_xi<-c()
#M_Y<-mat.or.vec(TL,M)
Y<-mat.or.vec(TL,1)
#W <- rep(0, 100)
vec_i = c()
for (i in 1:100) {
vec_i[i] = i
}
#Load foreach library
x <- foreach(i = 1:20) %do% {
sqrt(i)
}
x
x <- foreach(i = 1:20) %do% {
sqrt(i)
}
x <- foreach(i = 1:20, .combine=cbind) %do% {
sqrt(i)
}
x
library(doParallel)
install.packages("doParallel")
library(doParallel)
#Setup backend to use many processors
totalCores = detectCores()
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
library(foreach)
#Run forloop in Parallel
x <- foreach(i = 1:20 .combine=cbind) %dopar% {
library(foreach)
#Run forloop in Parallel
x <- foreach(i = 1:20 .combine=cbind) %dopar% {
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
library(foreach)
#Run forloop in Parallel
x <- foreach(i = 1:20 .combine=cbind) %dopar% {
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
library(foreach)
#Run forloop in Parallel
x <- foreach(i = 1:20, .combine=cbind) %dopar% {
sqrt(i)
}
x
#Stop cluster
stopCluster(cluster)
x
#Load foreach library
x <- foreach(i = 1:2000000, .combine=cbind) %do% {
sqrt(i)
}
setwd("C:/Users/Usuario1/Dropbox/Artículos/Trabajos_Francisco/New_GeometricB")
###Exact OU bridge from a to b
#dXt=-thetaOU_Xtdt+sigmaOU_dW
alpha=0.2
sigma=0.3
delta=1/1000
n=1000
nb=16
a=0.2
b=0.3
# number of bridges
M=1000
Xms=t(as.matrix(read.csv(file = 'propagator.csv'))[,-1])
Xms
plot( TiempoC,M_MM[1,],type="l")
BChaos=Bri_Chaos_GBM(Xms,a,b,alpha,sigma,n,delta,nb,M)
Bri_Chaos_GBM=function(Xms,a,b,alpha,sigma,n,delta,nb,M)
{
TF=delta*n
TiempoC<-seq(0, TF, length.out = n+1)
TL<-length(TiempoC)
OUchaos=NULL
M_Y=mat.or.vec(M,TL)
Yms=mat.or.vec(117,TL)
#### propagator for |m|=0
int1=c((TiempoC[TL]-TiempoC[1:(TL-1)])*Integrate_Xms(1/(TF-TiempoC[-TL]),Xms[1,]),0)
for(i in 1:TL)
{
Yms[1,i]= a+(b-a)*TiempoC[i]/TF+int1[i]
}
#### propagator for |m|>0
for(i in 1:nb){
Yms[i+1,]=c((TiempoC[TL]-TiempoC[1:(TL-1)])*Integrate_Xms(1/(TF-TiempoC[-TL]),Xms[1+i,]),0)
}
for (k in 1:M){
print(k)
Xis=rbind(fXis_1(100,TiempoC),fXis_2_j(c(1,2),TiempoC),fXis_2_j(c(1,3),TiempoC),fXis_2_j(c(2,2),TiempoC),fXis_2(3,TiempoC),fXis_3_12(c(1,2),TiempoC),fXis_3_21(c(1,2),TiempoC),fXis_3(2,TiempoC),fXis_4(2,TiempoC),fXis_5(2,TiempoC),fXis_6(2,TiempoC))
M_Y[k,]=apply(Yms[2:117,]*Xis,2,sum)+Yms[1,]
}
return(M_Y)
}
#generando Brownianos estandar
My_SBM=function(n,TiempoC)
{
MBM<-mat.or.vec(n,length(TiempoC))
l=length(TiempoC)
delta=TiempoC[2]-TiempoC[1]
for(i in 1:n){
for (j in 2:l)
{
MBM[i,j]<- MBM[i,j-1]+rnorm(1,0,sqrt(delta))
}
}
return(MBM)
}
#integral con respecto a Xms
Integrate_Xms=function(path,Xms)
{
npoints=length(path)
integral=numeric(npoints)
for( i in 2:npoints)
{
integral[i]=(Xms[i]-Xms[i-1])*(path[i-1]+path[i])/2.0
}
integral=cumsum(integral)
return(integral)
}
### Calcula las Xis
fXis_1=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(2/TF)*Ints
return(Xis)
}
fXis_2=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(2)*H2(sqrt(2/TF)*Ints)
return(Xis)
}
fXis_3=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(factorial(3))*H3(sqrt(2/TF)*Ints)
return(Xis)
}
fXis_4=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(factorial(4))*H4(sqrt(2/TF)*Ints)
return(Xis)
}
fXis_5=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(factorial(5))*H5(sqrt(2/TF)*Ints)
return(Xis)
}
fXis_6=function(nb,TiempoC)
{
senos=fsenos(nb,TiempoC)
cosenos=fcosenos(nb,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],j,TiempoC,BM[j,])
}
Xis=sqrt(factorial(6))*H6(sqrt(2/TF)*Ints)
return(Xis)
}
#integral de ito por trapecio acumulado
Int_Trap_Acum_2=function(senos,cosenos,j,t,W)
{
npoints=length(senos)
integral=numeric(npoints)
delta=t[2]-t[1]
TF=tail(t,1)
for( i in 2:npoints)
{
integral[i]=(senos[i]*W[i]-senos[i-1]*W[i-1])-(delta*j*pi/TF)*(W[i]*cosenos[i]+W[i-1]*cosenos[i-1])/2
}
integral=cumsum(integral)
return(integral)
}
#calcula senos
fsenos=function(n,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
senos<-mat.or.vec(n,TL)
for(i in 1:n){
senos[i,]=sin(i*pi*TiempoC/TF)
}
return(senos)
}
#calcula cosenos
fcosenos=function(n,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
cosenos<-mat.or.vec(n,TL)
for(i in 1:n){
cosenos[i,]=cos(i*pi*TiempoC/TF)
}
return(cosenos)
}
#calcula senos
fsenos_j=function(js,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
n=length(js)
senos<-mat.or.vec(n,TL)
for(i in 1:n){
senos[i,]=sin(js[i]*pi*TiempoC/TF)
}
return(senos)
}
#calcula cosenos
fcosenos_j=function(js,TiempoC)
{
TL<-length(TiempoC)
TF=tail(TiempoC,1)
n=length(js)
cosenos<-mat.or.vec(n,TL)
for(i in 1:n){
cosenos[i,]=cos(js[i]*pi*TiempoC/TF)
}
return(cosenos)
}
####hermite polynomial
H2=function(x)
{
h=(x^2-1)/sqrt(2)
return(h)
}
H3=function(x)
{
h=(x*(x^2-3))/sqrt(factorial(3))
return(h)
}
H4=function(x)
{
h=(x^4-6*x^2+3)/sqrt(factorial(4))
return(h)
}
H5=function(x)
{
h=(x*(x^4-10*x^2+15))/sqrt(factorial(5))
return(h)
}
H6=function(x)
{
h=(x^6-15*x^4+45*x^2-15)/sqrt(factorial(6))
return(h)
}
fXis_2_j=function(js,TiempoC)
{
nb=length(js)
senos=fsenos_j(js,TiempoC)
cosenos=fcosenos_j(js,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
Xis=1
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],js[j],TiempoC,BM[j,])
Xis=Xis*sqrt(2/TF)*Ints[j,]
}
return(Xis)
}
fXis_3_12=function(js,TiempoC)
{
nb=length(js)
senos=fsenos_j(js,TiempoC)
cosenos=fcosenos_j(js,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],js[j],TiempoC,BM[j,])
}
Xis=sqrt(2)*sqrt(2/TF)*Ints[1,]*H2(sqrt(2/TF)*Ints[2,])
return(Xis)
}
fXis_3_21=function(js,TiempoC)
{
nb=length(js)
senos=fsenos_j(js,TiempoC)
cosenos=fcosenos_j(js,TiempoC)
TF=tail(TiempoC,1)
BM=My_SBM(nb,TiempoC)
Ints=BM
for( j in 1:nb){
Ints[j,]=Int_Trap_Acum_2(senos[j,],cosenos[j,],js[j],TiempoC,BM[j,])
}
Xis=sqrt(2)*H2(sqrt(2/TF)*Ints[1,])*sqrt(2/TF)*Ints[2,]
return(Xis)
}
BChaos=Bri_Chaos_GBM(Xms,a,b,alpha,sigma,n,delta,nb,M)
plot( TiempoC,M_MM[1,],type="l")
plot( TiempoC,M_MM[1,],type="l")
M_MM[1,]
BChaos[2,]
Xms
View(Xms)
View(Xms)
setwd("C:/Users/Usuario1/Dropbox/Artículos/Trabajos_Francisco/New_GeometricB")
simu1<-as.matrix(read.csv("Propagator_1000MB.csv",header = T))
TiempoC<-simu1[,1]
simu<-Propagador <- simu1[,2:1018]
View(Propagador)
size(simu1)
length(simu1)
simu
My_SBM=function(n,TiempoC)
{
MBM<-mat.or.vec(n,length(TiempoC))
l=length(TiempoC)
delta=TiempoC[2]-TiempoC[1]
for(i in 1:n){
for (j in 2:l)
{
MBM[i,j]<- MBM[i,j-1]+rnorm(1,0,sqrt(delta))
}
}
return(MBM)
}
### Parametros del puente :
theta<-0.3
eta<-0.2
T1<-1
t0<-0
M<-2
TL<-length(TiempoC)
M_Y<-M_X<-mat.or.vec(TL,M)
Vector_xi<-c()
#M_Y<-mat.or.vec(TL,M)
Y<-mat.or.vec(TL,1)
#W <- rep(0, 100)
vec_i = c()
for (i in 1:1000) {
vec_i[i] = i
}
### Parametros del puente :
theta<-0.3
eta<-0.2
T1<-1
t0<-0
M<-2
TL<-length(TiempoC)
M_Y<-M_X<-mat.or.vec(TL,M)
Vector_xi<-c()
#M_Y<-mat.or.vec(TL,M)
Y<-mat.or.vec(TL,1)
#W <- rep(0, 100)
vec_i = c()
for (i in 1:1000) {
vec_i[i] = i
}
start_time <- Sys.time()
for(k in 1:M)
{
BM<-My_SBM(1000,TiempoC)
#W<-BM-BM
#M_X[1,k]<-0.1 #### initial condition
W <- rep(0, 1000)
for(t in 2:TL)
{
z <-BM[1:1000,t]
zr <-BM[1:1000,t-1]
W <- W + sqrt(2)*sin(vec_i*pi*TiempoC[t-1])*(z-zr)
Vector_xi[1]<-1
Vector_xi[2:1001] <- W
Vector_xi[1002]<- (W[1]) * (W[2])
Vector_xi[1003]<- (W[1]) * (W[3])
Vector_xi[1004]<- (W[2]) * (W[3])
Vector_xi[1005]<- sqrt(2)*((W[1]) ^ 2 - 1) / sqrt(2)
Vector_xi[1006]<- sqrt(2)*((W[2]) ^ 2 - 1) / sqrt(2)
Vector_xi[1007]<- sqrt(2)*((W[3]) ^ 2 - 1) / sqrt(2)
Vector_xi[1008]<- sqrt(2)*(W[1]) * ((W[2]) ^ 2 - 1) / sqrt(2)
Vector_xi[1009]<- sqrt(2)*(((W[1]) ^ 2 - 1)  * (W[2]) / sqrt(2))
Vector_xi[1010]<- sqrt(6)*(W[1]) * (((W[1]) ^ 2 - 3) / sqrt(6))
Vector_xi[1011]<- sqrt(6)*(W[2]) * (((W[2]) ^ 2 - 3) / sqrt(6))
Vector_xi[1012]<-sqrt(24)* (W[1] ^ 4 - 6 *W[1] ^ 2 + 3) / (2 * sqrt(6))
Vector_xi[1013]<-sqrt(24)* (W[2] ^ 4 - 6 *W[2] ^ 2 + 3) / (2 * sqrt(6))
Vector_xi[1014]<- sqrt(120)*(W[1]*(15 - 10*W[1]^2 + W[1]^4))/(2*sqrt(30))
Vector_xi[1015]<- sqrt(120)*(W[2]*(15 - 10*W[2]^2 + W[2]^4))/(2*sqrt(30))
Vector_xi[1016]<- sqrt(720)*(-15 + 45*W[1]^2 - 15*W[1]^4 + W[1]^6)/(12*sqrt(5))
Vector_xi[1017]<- sqrt(720)*(-15 + 45*W[2]^2 - 15*W[2]^4 + W[2]^6)/(12*sqrt(5))
#############  HERMITE polynomials
# H1 = x
# H2 = (x² - 1) / sqrt(2)
# H3 = x (x8² - 3) / sqrt(6)
# H4 (x⁴ - 6 x² + 3) / (2 sqrt(6))
# H5 = x (x⁴ - 10 x² + 15) / 2 sqrt(30))
# H6 = (-15 + 45 x^2 - 15 x^4 + x^6)/(12 sqrt(5))
##################################
suma<-Ym<-simu-simu
for(h in 2:1017) #### for |m|>0
{
suma[1,h]<-Ym[1,h]<-simu[1,h]
for(i in 2:TL)
{
suma[i,h]<- suma[i-1,h] + (simu[i,h]-simu[i-1,h])/(T1-TiempoC[i-1])
Ym[i,h]<- (T1-TiempoC[i])*suma[i,h]
}
}
#### for |m|=0
suma[1,1]<-simu[1,1]- simu[1,1]
Ym[1,1]<-eta
for(i in 2:TL)
{
suma[i,1]<- suma[i-1,1] + (simu[i,1]-simu[i-1,1])/(T1-TiempoC[i-1])
Ym[i,1]<- eta + (theta-eta ) *(TiempoC[i]/T1) + (T1-TiempoC[i])*suma[i-1,1]
}
M_Y[t,k] <- t(Ym[t,])%*%Vector_xi
} ## end for t
M_Y[1,k] <- t(Ym[1,])%*%Vector_xi
print(k)
} #### end for k
end_time <- Sys.time()
end_time - start_time
matplot(TiempoC,M_Y, type = "l", lwd=1)
